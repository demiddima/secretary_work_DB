# src/routers/health.py

from fastapi import APIRouter, HTTPException
import logging

router = APIRouter(tags=["health"])
logger = logging.getLogger(__name__)


@router.get("/", tags=["health"])
async def root():
    try:
        response = {"status": "ok"}
        # –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –≤–∞–∂–Ω—ã–π –≤—ã—Ö–æ–¥: —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–∞
        logger.info(f"[GET /] –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–∞: {response}")
        return response
    except Exception as e:
        logger.error(f"[GET /] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–∏—Å–∞: {e}")
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–∏—Å–∞")


@router.get("/health", tags=["health"])
async def health():
    try:
        response = {"status": "healthy"}
        # –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –≤–∞–∂–Ω—ã–π –≤—ã—Ö–æ–¥: —Å—Ç–∞—Ç—É—Å –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã
        logger.info(f"[GET /health] –°—Ç–∞—Ç—É—Å –∑–¥–æ—Ä–æ–≤—å—è: {response}")
        return response
    except Exception as e:
        logger.error(f"[GET /health] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {e}")
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã")


@router.get("/panic")
async def panic():
    try:
        # –ó–¥–µ—Å—å –Ω–∞–º–µ—Ä–µ–Ω–Ω–æ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –¥–ª—è —Ç–µ—Å—Ç–∞
        raise RuntimeError("üî• –≠—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–π RuntimeError")
    except RuntimeError as e:
        # –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –æ—à–∏–±–∫—É
        logger.error(f"[GET /panic] –û—à–∏–±–∫–∞: {e}")
        raise HTTPException(status_code=500, detail="–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞")
