# src/routers/health.py
from fastapi import APIRouter, HTTPException
import logging

# –ù–∞—Å—Ç—Ä–æ–∏–º –ª–æ–≥–≥–µ—Ä (–∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ—Ä–Ω–µ–≤–æ–π –ª–æ–≥–≥–µ—Ä)
logger = logging.getLogger()

router = APIRouter(
    tags=["health"]
)

@router.get("/", tags=["health"])
async def root():
    logger.info(f"[GET /] –í—Ö–æ–¥—è—â–∏–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–∏—Å–∞.")
    
    response = {"status": "ok"}
    
    logger.info(f"[GET /] –ò—Å—Ö–æ–¥—è—â–∏–π –æ—Ç–≤–µ—Ç: {response}")
    return response

@router.get("/health", tags=["health"])
async def health():
    logger.info(f"[GET /health] –í—Ö–æ–¥—è—â–∏–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã.")
    
    response = {"status": "healthy"}
    
    logger.info(f"[GET /health] –ò—Å—Ö–æ–¥—è—â–∏–π –æ—Ç–≤–µ—Ç: {response}")
    return response

@router.get("/panic")
async def panic():
    logger.info(f"[GET /panic] –í—Ö–æ–¥—è—â–∏–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ –æ—à–∏–±–∫–∏.")

    # –í –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ –ø—Ä–æ—Å—Ç–æ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º RuntimeError –¥–ª—è —Ç–µ—Å—Ç–∞
    try:
        raise RuntimeError("üî• –≠—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–π RuntimeError")
    except RuntimeError as e:
        logger.error(f"[GET /panic] –û—à–∏–±–∫–∞: {str(e)}")
        raise HTTPException(status_code=500, detail="–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞")
